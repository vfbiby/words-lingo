//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "content_type")]
pub enum ContentType {
    #[sea_orm(string_value = "video")]
    Video,
    #[sea_orm(string_value = "article")]
    Article,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "part_of_speech")]
pub enum PartOfSpeech {
    #[sea_orm(string_value = "noun")]
    Noun,
    #[sea_orm(string_value = "verb")]
    Verb,
    #[sea_orm(string_value = "adjective")]
    Adjective,
    #[sea_orm(string_value = "adverb")]
    Adverb,
    #[sea_orm(string_value = "pronoun")]
    Pronoun,
    #[sea_orm(string_value = "preposition")]
    Preposition,
    #[sea_orm(string_value = "conjunction")]
    Conjunction,
    #[sea_orm(string_value = "interjection")]
    Interjection,
    #[sea_orm(string_value = "article")]
    Article,
    #[sea_orm(string_value = "determiner")]
    Determiner,
    #[sea_orm(string_value = "modal_verb")]
    ModalVerb,
    #[sea_orm(string_value = "auxiliary_verb")]
    AuxiliaryVerb,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "proficiency_level")]
pub enum ProficiencyLevel {
    #[sea_orm(string_value = "not_started")]
    NotStarted,
    #[sea_orm(string_value = "learning")]
    Learning,
    #[sea_orm(string_value = "mastered")]
    Mastered,
}
